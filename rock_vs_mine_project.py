# -*- coding: utf-8 -*-
"""Rock vs Mine Project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1leaptejyOCwrVTjMPsqiEuf2GAyyLtCs

Importing the Dependencies
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

"""Data Collection and Data Processing"""

sonar_data = pd.read_csv('/content/Copy of sonar data.csv',header=None)

            # Because there is no Header in our dataset so we use header=None.

sonar_data.head()

sonar_data.shape

#describe ---> statistical measure of the data

sonar_data.describe()        #using pandas library.

sonar_data[60].value_counts()          # we are using index 60 Because we are representing rocks and mine features.

"""# If the examples of Rocks and Mines are equals So our Prediction is very well.

M--->Mines
R--->Rocks
"""

sonar_data.groupby(60).mean()

"""Here M--->Mine  R--->Rocks Representing the mean in Each Column."""

# separating data and Labels

X = sonar_data.drop(columns=60,axis=1)
Y = sonar_data[60]

print(X)
print(Y)

"""Training and Test Data"""

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.1, stratify=Y, random_state=1)

#     test_size = 0.1 (Means 10% of Test data...)
#     stratify-->It is used to split the data based on rock vs mine.
#     random state = it is used to split the data into a particular order.

print(X_train)
print(Y_train)

print(X.shape, X_train.shape,X_test.shape)

"""Model Training Logistic Regression"""

model = LogisticRegression()

model.fit(X_train, Y_train)

"""Model Evaluation"""

#accuracy on training data
X_train_prediction = model.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction,Y_train)

print('Accuracy on training data: ', training_data_accuracy)

"""# Since the Accuracy of Training data is 83% so it is Actually Good.

"""

#accuracy on test data

X_test_prediction = model.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction,Y_test)

print('Accuracy on test data: ', test_data_accuracy)

"""Since the Accuracy of Testing data is 76% So it is Actually Good.

Making a Predictive System

Predictive System will Predict Either the Object is Rock or Mines.
"""

input_data=(0.0762,0.0666,0.0481,0.0394,0.059,0.0649,0.1209,0.2467,0.3564,0.4459,0.4152,0.3952,0.4256,0.4135,0.4528,0.5326,0.7306,0.6193,0.2032,0.4636,0.4148,0.4292,0.573,0.5399,0.3161,0.2285,0.6995,1,0.7262,0.4724,0.5103,0.5459,0.2881,0.0981,0.1951,0.4181,0.4604,0.3217,0.2828,0.243,0.1979,0.2444	0.1847	0.0841,0.0692,0.0528,0.0357,0.0085,0.023,0.0046,0.0156,0.0031,0.0054,0.0105,0.011,0.0015,0.0072,0.0048,0.0107,0.0094)


input_data_as_numpy_array = np.asarray(input_data)

# reshape the np array as we are predicting for one instance
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)
#(1,-1) represents there is one instace and we are going to predict the labels for this one instace.

prediction = model.predict(input_data_reshaped)


print(prediction)

if (prediction[0]=='R'):
  print('The object is a Rock')
else:
  print('The object is a mine')

